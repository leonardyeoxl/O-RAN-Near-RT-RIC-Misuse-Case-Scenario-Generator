{
    "CWE-311": {
        "cwe_id": "CWE-311",
        "type": "Missing Encryption of Sensitive Data",
        "description": "The product does not encrypt sensitive or critical information before storage or transmission. The lack of proper data encryption passes up the guarantees of confidentiality, integrity, and accountability that properly implemented encryption conveys.",
        "child_relation_to": [],
        "parent_relation_to": ["CWE-319"],
        "tags": [
            "Encryption",
            "Encrypt",
            "Sensitive Data",
            "Data Encryption"
        ]
    },
    "CWE-319": {
        "cwe_id": "CWE-319",
        "type": "Cleartext Transmission of Sensitive Information",
        "description": "Many communication channels can be \"sniffed\" (monitored) by adversaries during data transmission. For example, in networking, packets can traverse many intermediary nodes from the source to the destination, whether across the internet, an internal network, the cloud, etc. Some actors might have privileged access to a network interface or any link along the channel, such as a router, but they might not be authorized to collect the underlying data. As a result, network traffic could be sniffed by adversaries, spilling security-critical data. Applicable communication channels are not limited to software products. Applicable channels include hardware-specific technologies such as internal hardware networks and external debug channels, supporting remote JTAG debugging. When mitigations are not applied to combat adversaries within the product's threat model, this weakness significantly lowers the difficulty of exploitation by such adversaries. When full communications are recorded or logged, such as with a packet dump, an adversary could attempt to obtain the dump long after the transmission has occurred and try to \"sniff\" the cleartext from the recorded communications in the dump itself.",
        "child_relation_to": ["CWE-311"],
        "parent_relation_to": [],
        "tags": [
            "Encryption",
            "Encrypt",
            "Sensitive Data",
            "Data Encryption"
        ]
    },
    "CWE-285": {
        "cwe_id": "CWE-285",
        "type": "Improper Authorization",
        "description": "The product does not perform or incorrectly performs an authorization check when an actor attempts to access a resource or perform an action. Assuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource. When access control checks are not applied consistently - or not at all - users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.",
        "child_relation_to": ["CWE-284"],
        "parent_relation_to": ["CWE-552", "CWE-732", "CWE-862", "CWE-863", "CWE-926", "CWE-927", "CWE-1230", "CWE-1256", "CWE-1297", "CWE-1328"],
        "tags": [
            "improper authorization",
            "authorization bypass",
            "insufficient privilege check",
            "access control vulnerability",
            "insecure authorization",
            "access control failure",
            "privilege escalation",
            "user impersonation",
            "access control vulnerability",
            "authorization flaw",
            "privilege validation",
            "authorization vulnerability",
            "access control weakness",
            "improper privilege verification",
            "authentication bypass",
            "authorization bypass",
            "insufficient access control",
            "insecure privilege check",
            "unauthorized access",
            "unauthorized action",
            "access control bypass",
            "improper access control",
            "authorization error",
            "authorization failure",
            "access control vulnerability",
            "privilege abuse"
        ]  
    },
    "CWE-20": {
        "cwe_id": "CWE-20",
        "type": "Improper Input Validation",
        "description": "The product receives input or data, but it does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly. Input validation is a frequently-used technique for checking potentially dangerous inputs in order to ensure that the inputs are safe for processing within the code, or when communicating with other components. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution. Input validation is not the only technique for processing input, however. Other techniques attempt to transform potentially-dangerous input into something safe, such as filtering (CWE-790) - which attempts to remove dangerous inputs - or encoding/escaping (CWE-116), which attempts to ensure that the input is not misinterpreted when it is included in output to another component. Other techniques exist as well (see CWE-138 for more examples.) Input validation can be applied to: - raw data - strings, numbers, parameters, file contents, etc. - metadata - information about the raw data, such as headers or size. Data can be simple or structured. Structured data can be composed of many nested layers, composed of combinations of metadata and raw data, with other simple or structured data. Implied or derived properties of data must often be calculated or inferred by the code itself. Errors in deriving properties may be considered a contributing factor to improper input validation. Note that \"input validation\" has very different meanings to different people, or within different classification schemes. Caution must be used when referencing this CWE entry or mapping to it. For example, some weaknesses might involve inadvertently giving control to an attacker over an input when they should not be able to provide an input at all, but sometimes this is referred to as input validation. Finally, it is important to emphasize that the distinctions between input validation and output escaping are often blurred, and developers must be careful to understand the difference, including how input validation is not always sufficient to prevent vulnerabilities, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a person's last name is inserted into a query. The name \"O'Reilly\" would likely pass the validation step since it is a common last name in the English language. However, this valid name cannot be directly inserted into the database because it contains the \"'\" apostrophe character, which would need to be escaped or otherwise transformed. In this case, removing the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.",
        "child_relation_to": ["CWE-707"],
        "parent_relation_to": ["CWE-179", "CWE-622", "CWE-1173", "CWE-1284", "CWE-1285", "CWE-1286", "CWE-1287", "CWE-1288", "CWE-1289"],
        "tags": [
            "improper input validation",
            "input validation vulnerability",
            "unvalidated input",
            "insufficient input validation",
            "input sanitization",
            "input filtering",
            "insecure input",
            "data validation failure",
            "unsafe input handling",
            "invalid input processing",
            "input validation flaw",
            "lack of input validation",
            "input validation error",
            "inadequate input verification",
            "improper user input validation",
            "input integrity check failure",
            "input validation weakness",
            "insufficient input verification",
            "weak input validation",
            "input validation bypass",
            "vulnerable input handling",
            "improper input sanitization",
            "input validation vulnerability",
            "input validation error",
            "lack of input filtering",
            "improper data validation",
            "insecure input handling",
            "input validation failure",
            "invalid input processing"
        ]  
    }
}